on:
  pull_request:
    branches:
      - nightly
      - master

name: pull_request
jobs:

  which_branch:
    runs-on: ubuntu-latest
    steps:
      # extract branch name
      - name: Extract branch name
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true'
        if: github.event_name != 'pull_request'
        shell: bash
        run: echo "::set-env name=BRANCH_NAME::$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_branch

      # extract branch name on pull request
      - name: Print branch name
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true'
        if: github.event_name == 'pull_request'
        run: echo "::set-env name=BRANCH_NAME::$(echo ${GITHUB_HEAD_REF})"

      # print branch name
      - name: Get branch name
        run: echo 'The branch name is' $BRANCH_NAME

      - name: test
        if: "!contains(github.ref, 'master')"
        run: echo $BRANCH_NAME

      - name: test2
        if: "contains(github.ref, 'optionals')"
        run: echo $BRANCH_NAME

      - name: test2
        if: "!contains(github.ref, 'optionals')"
        run: echo $BRANCH_NAME

#  test-setups:
#    runs-on: ubuntu-latest
#    strategy:
#      matrix:
#        opt: [vanilla, pandas, excel, json, parquet, hdf5, dask, all]
#        python-version: [ 3.7, 3.8 ]
#    steps:
#      - uses: actions/setup-python@v2
#        with:
#          python-version: ${{ matrix.python-version }}
#      - name: Checkout repo
#        uses: actions/checkout@v2
#        with:
#          token: ${{ secrets.token_cicd }}
#          fetch-depth: 0
#      - name: test dependencies ${{ matrix.opt }}
#        run: |
#          python -m pip install --upgrade pip
#          pip install pytest
#          if [ "${{ matrix.opt }}" = "vanilla" ] ; then
#              echo "running pip install ."
#              pip install .
#          else
#              echo "running pip install .[${{ matrix.opt }}]"
#              pip install .[${{ matrix.opt }}]
#          fi
#          pytest -s -v tests/dependencies/dep.py --name ${{ matrix.opt }}
#
#  pytest-37:
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/setup-python@v2
#        with:
#          python-version: '3.7'
#      - name: Checkout repo
#        uses: actions/checkout@v2
#        with:
#          token: ${{ secrets.token_cicd }}
#          fetch-depth: 0
#      - name: Install dependencies vanilla
#        run: |
#          python -m pip install --upgrade pip
#          pip install pytest
#          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
#
#      - name: test-vanilla
#        uses: nick-invision/retry@v2
#        env:
#          GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
#        with:
#          timeout_minutes: 60
#          max_attempts: 3
#          retry_on: error
#          command: |
#            pytest -s -v tests/unit/vanilla --token "$GOOGLE_APPLICATION_CREDENTIALS"
#
#      - name: Install dependencies json
#        run: |
#          pip install -r json-requirements.txt
#      - name: test-json
#        uses: nick-invision/retry@v2
#        env:
#          GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
#        with:
#          timeout_minutes: 60
#          max_attempts: 3
#          retry_on: error
#          command: |
#            pytest -s -v tests/unit/test_json.py --token "$GOOGLE_APPLICATION_CREDENTIALS"
#
#      - name: Install dependencies pandas
#        run: |
#          pip install -r pandas-requirements.txt
#      - name: test-pandas
#        uses: nick-invision/retry@v2
#        env:
#          GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
#        with:
#          timeout_minutes: 60
#          max_attempts: 3
#          retry_on: error
#          command: |
#            pytest -s -v tests/unit/test_pandas.py --token "$GOOGLE_APPLICATION_CREDENTIALS"
#
#      - name: Install dependencies parquet
#        run: |
#          pip install -r parquet-requirements.txt
#      - name: test-parquet
#        uses: nick-invision/retry@v2
#        env:
#          GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
#        with:
#          timeout_minutes: 60
#          max_attempts: 3
#          retry_on: error
#          command: |
#            pytest -s -v tests/unit/test_parquet.py --token "$GOOGLE_APPLICATION_CREDENTIALS"
#
#      - name: Install dependencies excel
#        run: |
#          pip install -r excel-requirements.txt
#      - name: test-excel
#        uses: nick-invision/retry@v2
#        env:
#          GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
#        with:
#          timeout_minutes: 60
#          max_attempts: 3
#          retry_on: error
#          command: |
#            pytest -s -v tests/unit/test_excel.py --token "$GOOGLE_APPLICATION_CREDENTIALS"
#
#      - name: Install dependencies hdf5
#        run: |
#          pip install -r hdf5-requirements.txt
#      - name: test-hdf5
#        uses: nick-invision/retry@v2
#        env:
#          GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
#        with:
#          timeout_minutes: 60
#          max_attempts: 3
#          retry_on: error
#          command: |
#            pytest -s -v tests/unit/test_hdf5.py --token "$GOOGLE_APPLICATION_CREDENTIALS"
#
#      - name: Install dependencies dask
#        run: |
#          pip install -r dask-requirements.txt
#      - name: test-dask
#        uses: nick-invision/retry@v2
#        env:
#          GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
#        with:
#          timeout_minutes: 60
#          max_attempts: 3
#          retry_on: error
#          command: |
#            pytest -s -v tests/unit/test_dask.py --token "$GOOGLE_APPLICATION_CREDENTIALS"
#
#  pytest-38:
#    runs-on: ubuntu-latest
#    needs: pytest-37
#    steps:
#      - uses: actions/setup-python@v2
#        with:
#          python-version: '3.8'
#      - name: Checkout repo
#        uses: actions/checkout@v2
#        with:
#          token: ${{ secrets.token_cicd }}
#          fetch-depth: 0
#      - name: Install dependencies vanilla
#        run: |
#          python -m pip install --upgrade pip
#          pip install pytest
#          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
#
#      - name: test-vanilla
#        uses: nick-invision/retry@v2
#        env:
#          GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
#        with:
#          timeout_minutes: 60
#          max_attempts: 3
#          retry_on: error
#          command: |
#            pytest -s -v tests/unit/vanilla --token "$GOOGLE_APPLICATION_CREDENTIALS"
#
#      - name: Install dependencies json
#        run: |
#          pip install -r json-requirements.txt
#      - name: test-json
#        uses: nick-invision/retry@v2
#        env:
#          GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
#        with:
#          timeout_minutes: 60
#          max_attempts: 3
#          retry_on: error
#          command: |
#            pytest -s -v tests/unit/test_json.py --token "$GOOGLE_APPLICATION_CREDENTIALS"
#
#      - name: Install dependencies pandas
#        run: |
#          pip install -r pandas-requirements.txt
#      - name: test-pandas
#        uses: nick-invision/retry@v2
#        env:
#          GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
#        with:
#          timeout_minutes: 60
#          max_attempts: 3
#          retry_on: error
#          command: |
#            pytest -s -v tests/unit/test_pandas.py --token "$GOOGLE_APPLICATION_CREDENTIALS"
#
#      - name: Install dependencies parquet
#        run: |
#          pip install -r parquet-requirements.txt
#      - name: test-parquet
#        uses: nick-invision/retry@v2
#        env:
#          GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
#        with:
#          timeout_minutes: 60
#          max_attempts: 3
#          retry_on: error
#          command: |
#            pytest -s -v tests/unit/test_parquet.py --token "$GOOGLE_APPLICATION_CREDENTIALS"
#
#      - name: Install dependencies excel
#        run: |
#          pip install -r excel-requirements.txt
#      - name: test-excel
#        uses: nick-invision/retry@v2
#        env:
#          GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
#        with:
#          timeout_minutes: 60
#          max_attempts: 3
#          retry_on: error
#          command: |
#            pytest -s -v tests/unit/test_excel.py --token "$GOOGLE_APPLICATION_CREDENTIALS"
#
#      - name: Install dependencies hdf5
#        run: |
#          pip install -r hdf5-requirements.txt
#      - name: test-hdf5
#        uses: nick-invision/retry@v2
#        env:
#          GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
#        with:
#          timeout_minutes: 60
#          max_attempts: 3
#          retry_on: error
#          command: |
#            pytest -s -v tests/unit/test_hdf5.py --token "$GOOGLE_APPLICATION_CREDENTIALS"
#
#      - name: Install dependencies dask
#        run: |
#          pip install -r dask-requirements.txt
#      - name: test-dask
#        uses: nick-invision/retry@v2
#        env:
#          GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
#        with:
#          timeout_minutes: 60
#          max_attempts: 3
#          retry_on: error
#          command: |
#            pytest -s -v tests/unit/test_dask.py --token "$GOOGLE_APPLICATION_CREDENTIALS"