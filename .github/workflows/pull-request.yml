on:
  pull_request:
    branches:
      - master

concurrency:
  group: pytests
  cancel-in-progress: true

name: pytests
jobs:

  check:
    runs-on: ubuntu-latest
    steps:
      - uses: 8BitJonny/gh-get-current-pr@2.0.0
        id: PR
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          # Verbose setting SHA when using Pull_Request event trigger to fix #16
          sha: ${{ github.event.pull_request.head.sha }}
          # Only return if PR is still open
          filterOutClosed: true
          # Only return if PR is not in draft state
          filterOutDraft: 1

      - name: Check PR message
        id: check
        run: |
          message=$(echo "${{ steps.PR.outputs.pr_body }}")
          echo "Message is $message"
          if [[ "$message" == "" ]] ; then
            echo "Pull request message not provided!!"
            exit 1
          fi

  test-setups:
    needs: check
    runs-on: ubuntu-latest
    strategy:
      matrix:
        opt: [vanilla, pandas, excel, json, parquet, hdf5, dask]
        python-version: [ 3.8 ]
    steps:

      - uses: actions/checkout@master
        with:
          persist-credentials: false # otherwise, the token used is the GITHUB_TOKEN, instead of your personal token
          fetch-depth: 0 # otherwise, you will failed to push refs to dest repo
          ref: refs/heads/${{ github.head_ref }}

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - uses: actions/cache@v2
        with:
          path: ${{ env.pythonLocation }}
          key: ${{ env.pythonLocation }}-${{ hashFiles('setup.cfg') }}-${{ matrix.opt }}

      - name: test dependencies ${{ matrix.opt }}
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade --upgrade-strategy eager pytest
          if [ "${{ matrix.opt }}" = "vanilla" ] ; then
              echo "installing requirements"
              pip install  --upgrade --upgrade-strategy eager .
          else
              echo "installing ${{ matrix.opt }}"
              pip install  --upgrade --upgrade-strategy eager .[${{ matrix.opt }}]
          fi
          pytest -s -v tests/dependencies/dep.py --name ${{ matrix.opt }}

  pytest-38:
    needs: check
    runs-on: ubuntu-latest
    steps:

      - uses: actions/checkout@master
        with:
          persist-credentials: false # otherwise, the token used is the GITHUB_TOKEN, instead of your personal token
          fetch-depth: 0 # otherwise, you will failed to push refs to dest repo
          ref: refs/heads/${{ github.head_ref }}

      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - uses: actions/cache@v2
        with:
          path: ${{ env.pythonLocation }}
          key: ${{ env.pythonLocation }}-${{ hashFiles('setup.cfg') }}-all

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade --upgrade-strategy eager wheel
          pip install --upgrade --upgrade-strategy eager pytest
          pip install --upgrade --upgrade-strategy eager pytest-gitignore
          pip install --upgrade --upgrade-strategy eager pytest-github-actions-annotate-failures
          pip install --upgrade --upgrade-strategy eager .[all]

      - name: test-vanilla
        uses: nick-invision/retry@v2
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.ORG_SANDBOX_CRED }}
          GOOGLE_APPLICATION_CREDENTIALS_2: ${{ secrets.ORG_DEV_CRED }}
        with:
          timeout_minutes: 60
          max_attempts: 3
          retry_on: error
          command: |
            pytest -s -v tests/unit/vanilla/test_fs_initialisation.py --token "$GOOGLE_APPLICATION_CREDENTIALS" --token2 "$GOOGLE_APPLICATION_CREDENTIALS_2"

      - name: test-json
        uses: nick-invision/retry@v2
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.ORG_SANDBOX_CRED }}
        with:
          timeout_minutes: 60
          max_attempts: 3
          retry_on: error
          command: |
            pytest -s -v tests/unit/test_json.py --token "$GOOGLE_APPLICATION_CREDENTIALS"

      - name: test-pandas
        uses: nick-invision/retry@v2
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.ORG_SANDBOX_CRED }}
        with:
          timeout_minutes: 60
          max_attempts: 3
          retry_on: error
          command: |
            pytest -s -v tests/unit/test_pandas.py --token "$GOOGLE_APPLICATION_CREDENTIALS"

      - name: test-parquet
        uses: nick-invision/retry@v2
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.ORG_SANDBOX_CRED }}
        with:
          timeout_minutes: 60
          max_attempts: 3
          retry_on: error
          command: |
            pytest -s -v tests/unit/test_parquet.py --token "$GOOGLE_APPLICATION_CREDENTIALS"

      - name: test-excel
        uses: nick-invision/retry@v2
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.ORG_SANDBOX_CRED }}
        with:
          timeout_minutes: 60
          max_attempts: 3
          retry_on: error
          command: |
            pytest -s -v tests/unit/test_excel.py --token "$GOOGLE_APPLICATION_CREDENTIALS"

      - name: test-hdf5
        uses: nick-invision/retry@v2
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.ORG_SANDBOX_CRED }}
        with:
          timeout_minutes: 60
          max_attempts: 3
          retry_on: error
          command: |
            pytest -s -v tests/unit/test_hdf5.py --token "$GOOGLE_APPLICATION_CREDENTIALS"

      - name: test-dask
        uses: nick-invision/retry@v2
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.ORG_SANDBOX_CRED }}
        with:
          timeout_minutes: 60
          max_attempts: 3
          retry_on: error
          command: |
            pytest -s -v tests/unit/test_dask.py --token "$GOOGLE_APPLICATION_CREDENTIALS"
